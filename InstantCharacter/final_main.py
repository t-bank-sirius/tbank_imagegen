import uvicorn
import asyncio
import functools
from concurrent.futures import ThreadPoolExecutor
from fastapi import FastAPI, HTTPException, BackgroundTasks
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import base64
from PIL import Image
import io
import time
import gc
import torch

from final import (
    load_models_optimized, 
    text_to_image, 
    image_to_image, 
    create_avatar, 
    images_merge, 
    safety_checker,
    sketch_to_image
)

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏
app = FastAPI(
    title="Optimized Image Generation API",
    description="–°–≤–µ—Ä—Ö–±—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞ 5 —Å–µ–∫—É–Ω–¥",
    version="2.0"
)

# CORS –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Thread pool –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
executor = ThreadPoolExecutor(max_workers=2)

# ---- –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ ----
def pil_to_base64_fast(img: Image.Image, format: str = "JPEG", quality: int = 85) -> str:
    """–ë—ã—Å—Ç—Ä–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è PIL –≤ base64 —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π"""
    buffered = io.BytesIO()
    
    if img.mode != 'RGB':
        img = img.convert('RGB')
    
    img.save(buffered, format=format, quality=quality, optimize=True)
    img_str = base64.b64encode(buffered.getvalue()).decode()
    return f"data:image/{format.lower()};base64,{img_str}"

def base64_to_pil_fast(data: str) -> Image.Image:
    """–ë—ã—Å—Ç—Ä–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è base64 –≤ PIL"""
    if data.startswith('data:image'):
        data = data.split(',', 1)[1]
    
    img_data = base64.b64decode(data)
    img = Image.open(io.BytesIO(img_data))
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    if img.mode != 'RGB':
        img = img.convert('RGB')
    
    return img

# --- –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ Pydantic –º–æ–¥–µ–ª–∏ ---
class PromptInput(BaseModel):
    prompt: str
    style_key: str

class AvatarInput(BaseModel):
    prompt: str

class MergeInput(BaseModel):
    images: list[str]
    prompt: str

class ImagePromptInput(BaseModel):
    image: str  # base64 string
    prompt: str
    style_key: str

class SafetyInput(BaseModel):
    image: str  # base64 string
class SketchInput(BaseModel):
    image: str
    prompt: str

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
def monitor_performance(func):
    @functools.wraps(func)
    async def wrapper(*args, **kwargs):
        start_time = time.time()
        result = await func(*args, **kwargs)
        end_time = time.time()
        
        execution_time = end_time - start_time
        print(f"üöÄ {func.__name__} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞ {execution_time:.2f} —Å–µ–∫—É–Ω–¥")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –æ—Ç–≤–µ—Ç
        if isinstance(result, dict) and "time" not in result:
            result["execution_time"] = execution_time
            
        return result
    return wrapper

# --- Startup —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π ---
@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø—Ä–æ–≥—Ä–µ–≤–æ–º –º–æ–¥–µ–ª–∏"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...")
    
    # –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
    if torch.cuda.is_available():
        torch.cuda.empty_cache()
    gc.collect()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    loop = asyncio.get_event_loop()
    await loop.run_in_executor(executor, load_models_optimized)
    
    print("‚úÖ –°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

# --- –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ Endpoints ---

@app.post("/generate_from_text")
@monitor_performance
async def generate_from_text_optimized(request: PromptInput):
    """–°–≤–µ—Ä—Ö–±—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        loop = asyncio.get_event_loop()
        result_image = await loop.run_in_executor(
            executor, 
            text_to_image, 
            request.prompt, 
            request.style_key
        )
        
        # –ë—ã—Å—Ç—Ä–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ base64
        image_b64 = pil_to_base64_fast(result_image)
        
        return {"image": image_b64, "status": "success"}
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ generate_from_text: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/create_avatar")
@monitor_performance
async def create_avatar_optimized(request: AvatarInput):
    """–°–≤–µ—Ä—Ö–±—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞"""
    try:
        loop = asyncio.get_event_loop()
        result_image = await loop.run_in_executor(
            executor, 
            create_avatar, 
            request.prompt
        )
        
        image_b64 = pil_to_base64_fast(result_image)
        return {"image": image_b64, "status": "success"}
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ create_avatar: {e}")
        raise HTTPException(status_code=500, detail=str(e))
@app.post("/sketch_to_image")
@monitor_performance
async def sketch(request: SketchInput):
    """–°–≤–µ—Ä—Ö–±—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è sketch 2 image"""
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º base64 –≤ PIL
        input_image = base64_to_pil_fast(request.image)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        loop = asyncio.get_event_loop()
        result_image = await loop.run_in_executor(
            executor, 
            sketch_to_image, 
            input_image,
            request.prompt,
            
        )
        
        image_b64 = pil_to_base64_fast(result_image)
        return {"image": image_b64, "status": "success"}
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ generate_from_image_text: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/images_merge")
@monitor_performance
async def images_merge_optimized(request: MergeInput):
    """–°–≤–µ—Ä—Ö–±—ã—Å—Ç—Ä–æ–µ —Å–ª–∏—è–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º base64 –≤ PIL –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        def convert_image(img_b64):
            return base64_to_pil_fast(img_b64)
        
        loop = asyncio.get_event_loop()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        pil_images = await asyncio.gather(*[
            loop.run_in_executor(executor, convert_image, img_b64)
            for img_b64 in request.images
        ])
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        result_image = await loop.run_in_executor(
            executor, 
            images_merge, 
            pil_images, 
            request.prompt
        )
        
        image_b64 = pil_to_base64_fast(result_image)
        return {"image": image_b64, "status": "success"}
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ images_merge: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/generate_from_image_text")
@monitor_performance
async def generate_from_image_text_optimized(request: ImagePromptInput):
    """–°–≤–µ—Ä—Ö–±—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ç–µ–∫—Å—Ç–∞"""
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º base64 –≤ PIL
        input_image = base64_to_pil_fast(request.image)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        loop = asyncio.get_event_loop()
        result_image = await loop.run_in_executor(
            executor, 
            image_to_image, 
            request.prompt, 
            request.style_key, 
            input_image
        )
        
        image_b64 = pil_to_base64_fast(result_image)
        return {"image": image_b64, "status": "success"}
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ generate_from_image_text: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/safety")
async def safety_check_optimized(request: SafetyInput):
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    try:
        result = safety_checker(request.image)
        return {"data": result, "status": "success"}
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ safety: {e}")
        return {"data": "good", "status": "error"}

# --- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ endpoints ---

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
    return {
        "status": "healthy", 
        "gpu_available": torch.cuda.is_available(),
        "gpu_memory": torch.cuda.get_device_properties(0).total_memory if torch.cuda.is_available() else None
    }

@app.post("/batch_generate")
@monitor_performance
async def batch_generate(requests: list[PromptInput]):
    """–ë–∞—Ç—á–µ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    try:
        if len(requests) > 4:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞
            raise HTTPException(status_code=400, detail="–ú–∞–∫—Å–∏–º—É–º 4 –∑–∞–ø—Ä–æ—Å–∞ –≤ –±–∞—Ç—á–µ")
        
        loop = asyncio.get_event_loop()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        tasks = [
            loop.run_in_executor(executor, text_to_image, req.prompt, req.style_key)
            for req in requests
        ]
        
        results = await asyncio.gather(*tasks)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
        images_b64 = [pil_to_base64_fast(img) for img in results]
        
        return {"images": images_b64, "count": len(images_b64), "status": "success"}
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ batch_generate: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# --- Cleanup –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ ---
@app.on_event("shutdown")
async def shutdown_event():
    """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
    print("üßπ –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã...")
    if torch.cuda.is_available():
        torch.cuda.empty_cache()
    gc.collect()
    executor.shutdown(wait=True)

# --- –î–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–∞–∫ —Å–∫—Ä–∏–ø—Ç–∞ ---
if __name__ == "__main__":
    uvicorn.run(
        "final_main:app", 
        host="0.0.0.0", 
        port=8003, 
        reload=False,  # –û—Ç–∫–ª—é—á–∞–µ–º reload –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        workers=1,     # –û–¥–∏–Ω worker –¥–ª—è GPU –º–æ–¥–µ–ª–∏
        loop="uvloop", # –ë—ã—Å—Ç—Ä—ã–π event loop
        log_level="info"
    ) 