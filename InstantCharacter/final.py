import torch
from PIL import Image
from pipeline import InstantCharacterFluxPipeline
from style_prompt import get_prompt
import requests
import time

pipe = None

def load_models_optimized():
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    global pipe
    
    print("üî• –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏...")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    torch.backends.cuda.matmul.allow_tf32 = True
    torch.backends.cudnn.allow_tf32 = True
    torch.set_float32_matmul_precision("medium")  # –ò–ª–∏ "high" –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
    
    # –ü—É—Ç–∏ –∫ –º–æ–¥–µ–ª—è–º
    ip_adapter_path = '/workspaces/nikbauer34/tbank_imagegen/models/checkpoint/instantcharacter_ip-adapter.bin'
    base_model = "/workspaces/nikbauer34/tbank_imagegen/models/flux-8bit"
    image_encoder_path = '/workspaces/nikbauer34/tbank_imagegen/models/google'
    image_encoder_2_path = '/workspaces/nikbauer34/tbank_imagegen/models/facebook'
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å —Å fp16 –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    pipe = InstantCharacterFluxPipeline.from_pretrained(
        base_model, 
        torch_dtype=torch.bfloat16,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º fp16 –≤–º–µ—Å—Ç–æ bfloat16
        use_safetensors=True
    )
    
    # –í–ê–ñ–ù–û: –ó–∞–≥—Ä—É–∂–∞–µ–º –í–°–Æ –º–æ–¥–µ–ª—å –Ω–∞ GPU - –ë–ï–ó CPU offloading!
    # –î–ª—è 8bit –º–æ–¥–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º device_map –≤–º–µ—Å—Ç–æ .to()
    if hasattr(pipe, 'device_map') and pipe.device_map is not None:
        # –ú–æ–¥–µ–ª—å —É–∂–µ –Ω–∞ GPU —á–µ—Ä–µ–∑ device_map
        print("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —á–µ—Ä–µ–∑ device_map")
    else:
        pipe.to("cuda")
    
    # –í–∫–ª—é—á–∞–µ–º memory efficient attention (–±–µ–∑ xformers)
    try:
        pipe.enable_attention_slicing(1)
        print("‚úÖ Attention slicing –≤–∫–ª—é—á–µ–Ω")
    except Exception as e:
        print(f"‚ö†Ô∏è  Attention slicing –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å: {e}")
    
    # –ü—Ä–æ–±—É–µ–º –≤–∫–ª—é—á–∏—Ç—å xformers —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    try:
        import xformers
        pipe.enable_xformers_memory_efficient_attention()
        print("‚úÖ xformers memory efficient attention –≤–∫–ª—é—á–µ–Ω")
    except ImportError:
        print("‚ö†Ô∏è  xformers –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ attention")
    except Exception as e:
        print(f"‚ö†Ô∏è  xformers –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å: {e}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–¥–∞–ø—Ç–µ—Ä
    pipe.init_adapter(
        image_encoder_path=image_encoder_path, 
        image_encoder_2_path=image_encoder_2_path, 
        subject_ipadapter_cfg=dict(subject_ip_adapter_path=ip_adapter_path, nb_token=1024), 
        device=torch.device('cuda')
    )
    
    # Torch.compile –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è inference (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ 8bit)
    try:
        print("üöÄ –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å...")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è torch.compile
        torch._dynamo.config.cache_size_limit = 1024
        torch._dynamo.config.capture_scalar_outputs = True
        torch._dynamo.config.capture_dynamic_output_shape_ops = True
        
        # –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        pipe.transformer = torch.compile(
            pipe.transformer,
            mode="max-autotune",
            fullgraph=True,
            dynamic=False
        )
        
        pipe.vae.decoder = torch.compile(
            pipe.vae.decoder,
            mode="max-autotune",
            fullgraph=True
        )
        print("‚úÖ torch.compile –ø—Ä–∏–º–µ–Ω–µ–Ω")
    except Exception as e:
        print(f"‚ö†Ô∏è  torch.compile –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å: {e}")
    
    # –ü—Ä–æ–≥—Ä–µ–≤ –º–æ–¥–µ–ª–∏
    print("üî• –ü—Ä–æ–≥—Ä–µ–≤–∞–µ–º –º–æ–¥–µ–ª—å...")
    warmup_image(pipe)
    
    print("‚úÖ –ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")

def warmup_image(pipe):
    """–ü—Ä–æ–≥—Ä–µ–≤ –º–æ–¥–µ–ª–∏ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –±—ã—Å—Ç—Ä–æ–≥–æ inference"""
    try:
        warmup_image = Image.open("/workspaces/nikbauer34/tbank_imagegen/InstantCharacter/assets/100.jpg").convert('RGB')
        
        # –î–µ–ª–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö inference –¥–ª—è –ø—Ä–æ–≥—Ä–µ–≤–∞
        with torch.inference_mode():
            for i in range(2):  # 2 –∏—Ç–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞
                _ = pipe(
                    prompt="test warmup",
                    num_inference_steps=4,  # –ú–∏–Ω–∏–º—É–º –¥–ª—è –ø—Ä–æ–≥—Ä–µ–≤–∞
                    guidance_scale=3.5,
                    subject_scale=0.9,
                    height=512,
                    width=512,
                    subject_image=warmup_image
                ).images[0]
                print(f"–ü—Ä–æ–≥—Ä–µ–≤ {i+1}/2 –∑–∞–≤–µ—Ä—à–µ–Ω")
    except Exception as e:
        print(f"‚ö†Ô∏è  –ü—Ä–æ–≥—Ä–µ–≤ –Ω–µ —É–¥–∞–ª—Å—è: {e}")

def concatenate_images(images, direction="horizontal"):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    if not images:
        return None
    
    valid_images = [img for img in images if img is not None]
    if not valid_images:
        return None
    
    if len(valid_images) == 1:
        return valid_images[0].convert("RGB")
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑
    valid_images = [img.convert("RGB") for img in valid_images]
    
    if direction == "horizontal":
        total_width = sum(img.width for img in valid_images)
        max_height = max(img.height for img in valid_images)
        
        concatenated = Image.new('RGB', (total_width, max_height), (255, 255, 255))
        
        x_offset = 0
        for img in valid_images:
            y_offset = (max_height - img.height) // 2
            concatenated.paste(img, (x_offset, y_offset))
            x_offset += img.width
    else:  # vertical
        max_width = max(img.width for img in valid_images)
        total_height = sum(img.height for img in valid_images)
        
        concatenated = Image.new('RGB', (max_width, total_height), (255, 255, 255))
        
        y_offset = 0
        for img in valid_images:
            x_offset = (max_width - img.width) // 2
            concatenated.paste(img, (x_offset, y_offset))
            y_offset += img.height
    
    return concatenated

def safety_checker(image: str):
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–π API"""
    try:
        r = requests.post("http://0.0.0.0:8001/analyze", 
                         {"image_base64": image, "comment": ""}, 
                         timeout=2)  # –ë—ã—Å—Ç—Ä—ã–π timeout
        return r.json()
    except:
        return "good"  # –ü—Ä–∏ –æ—à–∏–±–∫–µ —Å—á–∏—Ç–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–º

def create_avatar(prompt: str):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞"""
    with torch.inference_mode():
        avatar_image = pipe(
            prompt=f"{prompt} A cute 3D character portrait in Pixar Disney style, soft lighting, big expressive eyes, friendly smile, pastel colors, upper body shot, studio background", 
            num_inference_steps=9,  # –£–º–µ–Ω—å—à–µ–Ω–æ —Å 8 –¥–æ 4
            guidance_scale=3.5,
            subject_scale=0.9,
            height=256,
            width=256,
            subject_image=Image.open("/workspaces/nikbauer34/tbank_imagegen/InstantCharacter/assets/100.jpg").convert('RGB')
        ).images[0]
    return avatar_image

def images_merge(images: list, prompt: str):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–ª–∏—è–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    valid_images = images
    concatenated_image = concatenate_images(valid_images, "horizontal")
    
    # –ë—ã—Å—Ç—Ä–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞
    original_width, original_height = concatenated_image.size
    if original_width >= original_height:
        new_width = 512
        new_height = int(original_height * (new_width / original_width))
        new_height = round(new_height / 64) * 64
    else:
        new_height = 512
        new_width = int(original_width * (new_height / original_height))
        new_width = round(new_width / 64) * 64
    
    concatenated_image_resized = concatenated_image.resize((new_width, new_height), Image.LANCZOS)

    final_prompt = f'Create unified image: {prompt}. Maintain identity while blending seamlessly.'
    
    with torch.inference_mode():
        result_image = pipe(
            subject_image=concatenated_image, 
            prompt=final_prompt,
            guidance_scale=0.9,
            width=concatenated_image_resized.size[0],
            num_inference_steps=6,  # –£–º–µ–Ω—å—à–µ–Ω–æ —Å 31 –¥–æ 6
            height=concatenated_image_resized.size[1],
        ).images[0]
    
    return result_image

def text_to_image(prompt: str, style_key: str):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    with torch.inference_mode():
        result_image = pipe(
            prompt="don't look at the image, just generate: " + get_prompt(prompt, style_key), 
            num_inference_steps=13,  # –£–º–µ–Ω—å—à–µ–Ω–æ —Å 9 –¥–æ 4
            guidance_scale=3.5,
            subject_scale=0.9,
            height=512,
            width=512,
            subject_image=Image.open("/workspaces/nikbauer34/tbank_imagegen/InstantCharacter/assets/100.jpg").convert('RGB')
        ).images[0]
    return result_image

def image_to_image(prompt: str, style_key: str, image: Image):
    print(image)
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    with torch.inference_mode():
        result_image = pipe(
            prompt=get_prompt(prompt, style_key), 
            num_inference_steps=20,  # –£–º–µ–Ω—å—à–µ–Ω–æ —Å 18 –¥–æ 6
            guidance_scale=3.5,
            subject_scale=0.9,
            subject_image=image,
            height=512,
            width=512,
        ).images[0]
    return result_image 
def sketch_to_image(image: Image, prompt: str):
    new_image = pipe(
        prompt=prompt + " Create a colorful, friendly, high-quality illustration based on this child's sketch.", 
        num_inference_steps=14,
        guidance_scale=3.5,
        subject_scale=0.9,
        height=512,
        width=512,
        subject_image=image
    ).images[0]
    return new_image